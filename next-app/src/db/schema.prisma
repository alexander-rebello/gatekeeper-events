generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                  Int                @id @unique @default(autoincrement())
  uuid                String             @unique @default(uuid()) @db.Uuid
  first_name          String
  last_name           String
  image               String?
  email               String             @unique
  email_verified      DateTime?
  password            String
  last_login          DateTime?
  created_at          DateTime           @default(now())
  status_id           Int                @default(1)
  role_id             Int                @default(1)
  api_tokens          api_token[]        @relation("api_token_user")
  events              event[]            @relation("event_user")
  sessions            session[]          @relation("session_user")
  verification_tokens token[]            @relation("verification_token_user")
  role                user_role          @relation("user_role", fields: [role_id], references: [id])
  status              user_status        @relation("user_status", fields: [status_id], references: [id])
  user_event_roles    user_event_roles[] @relation("user_event_roles")
}

model user_role {
  id    Int    @id @unique @default(autoincrement())
  value String @unique
  users user[] @relation("user_role")
}

model user_status {
  id    Int    @id @unique @default(autoincrement())
  value String @unique
  users user[] @relation("user_status")
}

model event {
  id                Int                @id @unique @default(autoincrement())
  uuid              String             @unique @default(uuid()) @db.Uuid
  token             String             @unique
  owner_id          Int
  status_id         Int                @default(1)
  created_at        DateTime           @default(now())
  timezone          String?            @default("Europe/Berlin")
  name              String
  organizer         String?
  main_image        String?
  first_image       String?
  second_image      String?
  third_image       String?
  short_description String
  long_description  String?
  start_date        DateTime
  end_date          DateTime
  sale_start_date   DateTime?
  sale_end_date     DateTime?
  location          String
  payment_link      String?
  bank              String?
  minor_allowance   Boolean            @default(false)
  discount_codes    discount_code[]    @relation("discount_code_event")
  owner             user               @relation("event_user", fields: [owner_id], references: [id])
  status            event_status       @relation("event_status", fields: [status_id], references: [id])
  orders            order[]            @relation("order_event")
  sessions          session[]          @relation("session_event")
  tickets           ticket_type[]      @relation("ticket_type_event")
  user_event_roles  user_event_roles[] @relation("event_user_event_roles")
}

model event_status {
  id     Int     @id @unique @default(autoincrement())
  value  String  @unique
  events event[] @relation("event_status")
}

model discount_code {
  id            Int                  @id @unique @default(autoincrement())
  code          String
  value         Float
  is_percentage Boolean
  event_id      Int
  status_id     Int                  @default(1)
  created_at    DateTime             @default(now())
  event         event                @relation("discount_code_event", fields: [event_id], references: [id])
  status        discount_code_status @relation("discount_code_status", fields: [status_id], references: [id])
  orders        order[]              @relation("order_discount_code")

  @@unique([code, event_id])
}

model discount_code_status {
  id             Int             @id @unique @default(autoincrement())
  value          String          @unique
  discount_codes discount_code[] @relation("discount_code_status")
}

model ticket_type {
  id           Int                @id @unique @default(autoincrement())
  event_id     Int
  title        String
  description  String?
  price        Decimal            @db.Decimal(12, 2)
  color        String
  max_quantity Int                @default(0)
  status_id    Int                @default(1)
  created_at   DateTime           @default(now())
  position     Int                @default(0)
  tickets      ticket[]           @relation("ticket_type")
  event        event              @relation("ticket_type_event", fields: [event_id], references: [id])
  status       ticket_type_status @relation("ticket_type_status", fields: [status_id], references: [id])
}

model ticket_type_status {
  id      Int           @id @unique @default(autoincrement())
  value   String        @unique
  tickets ticket_type[] @relation("ticket_type_status")
}

model order {
  id                Int            @id @unique @default(autoincrement())
  uuid              String         @unique @default(uuid()) @db.Uuid
  event_id          Int
  first_name        String
  last_name         String
  email             String
  message           String?
  notes             String?
  status_id         Int            @default(1)
  discount_code_id  Int?
  created_at        DateTime       @default(now())
  tickets_delivered DateTime?
  discount_code     discount_code? @relation("order_discount_code", fields: [discount_code_id], references: [id])
  event             event          @relation("order_event", fields: [event_id], references: [id])
  status            order_status   @relation("order_status", fields: [status_id], references: [id])
  tickets           ticket[]       @relation("ticket_order")
}

model order_status {
  id     Int     @id @unique @default(autoincrement())
  value  String  @unique
  orders order[] @relation("order_status")
}

model ticket {
  id             Int         @id @unique @default(autoincrement())
  uuid           String      @unique @default(uuid()) @db.Uuid
  order_id       Int
  ticket_type_id Int
  name           String?
  used           DateTime?
  order          order       @relation("ticket_order", fields: [order_id], references: [id], onDelete: Cascade)
  ticketType     ticket_type @relation("ticket_type", fields: [ticket_type_id], references: [id])
}

model session {
  id             String   @id @unique
  userId         Int
  currentEventId Int?
  createdAt      DateTime @default(now())
  expiresAt      DateTime
  currentEvent   event?   @relation("session_event", fields: [currentEventId], references: [id])
  user           user     @relation("session_user", fields: [userId], references: [id], onDelete: Cascade)
}

model token {
  id         Int        @id @unique @default(autoincrement())
  expires    DateTime   @default(dbgenerated("(now() + '01:00:00'::interval)"))
  created_at DateTime   @default(now())
  token      String     @unique
  user_id    Int
  type_id    Int
  type       token_type @relation("token_type", fields: [type_id], references: [id])
  user       user       @relation("verification_token_user", fields: [user_id], references: [id], onDelete: Cascade)
}

model token_type {
  id     Int     @id @unique @default(autoincrement())
  value  String  @unique
  tokens token[] @relation("token_type")
}

model contact {
  id         Int      @id @unique @default(autoincrement())
  name       String
  email      String
  message    String
  created_at DateTime @default(now())
}

model api_token {
  id                       Int      @id @default(autoincrement())
  access_token             String   @unique
  refresh_token            String   @unique
  user_id                  Int
  created_at               DateTime @default(now())
  access_token_expires_at  DateTime
  refresh_token_expires_at DateTime
  user                     user     @relation("api_token_user", fields: [user_id], references: [id])
}

model event_permission {
  id                     Int                      @id @unique @default(autoincrement())
  name                   String
  description            String?
  event_role_permissions event_role_permissions[] @relation("event_permission")
}

model event_role {
  id                     Int                      @id @unique @default(autoincrement())
  name                   String
  event_role_permissions event_role_permissions[] @relation("event_role")
  user_event_roles       user_event_roles[]       @relation("user_event_roles")
}

model event_role_permissions {
  role_id          Int
  permission_id    Int
  event_permission event_permission @relation("event_permission", fields: [permission_id], references: [id])
  event_role       event_role       @relation("event_role", fields: [role_id], references: [id])

  @@id([role_id, permission_id])
}

model user_event_roles {
  user_id    Int
  event_id   Int
  role_id    Int
  date_added DateTime   @default(now())
  event      event      @relation("event_user_event_roles", fields: [event_id], references: [id])
  event_role event_role @relation("user_event_roles", fields: [role_id], references: [id])
  user       user       @relation("user_event_roles", fields: [user_id], references: [id])

  @@id([user_id, event_id])
}

view sales {
  id       Int      @unique
  event_id Int
  day      DateTime @db.Timestamp(6)
  quantity Int
}

view statistics {
  event_id          Int      @unique
  start_date        DateTime
  complete_quantity Int
  complete_sum      Decimal?
  payed_quantity    Int
  payed_sum         Decimal?
}

view order_info {
  event_id          Int
  id                Int       @unique
  uuid              String    @unique @db.Uuid
  name              String
  email             String
  created_at        DateTime
  status            String
  quantity          Int
  tickets_delivered DateTime?
  sum               Decimal?
}

view tickets_sold {
  id           Int      @unique
  event_id     Int
  title        String
  price        Decimal  @db.Decimal(12, 2)
  color        String
  max_quantity Int
  created_at   DateTime
  position     Int
  status       String
  quantity     Int
}

view order_quantity {
  order_id       Int
  ticket_type_id Int
  quantity       Int

  @@id([order_id, ticket_type_id])
}
